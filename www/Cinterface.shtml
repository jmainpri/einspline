<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
  <title>einbspline</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor=#FFFFD0>
<!--#include virtual="header.shtml" -->

<center>
<h1> C interface </h1>
</center>
libbspline organizes spline routines into two groups:  those which are
specified on a uniform grid (or multidimensional mesh), and those on
nonuniform grids.  The uniform versions of the routines are documented
below, followed by the nonuniform versions.

<center><h2> Uniform splines </h2></center>
<h2><a href="NUBinterface.shtml"> Nonuniform Splines </a></h2>

<h3> <font color="Blue"> Spline creation </font></h3>
Each B-spline object type has an associated creation routine, to the
user must pass the dimensions of the data, the boundary conditions to
use, and a pointer to the mesh data.  
<h4> Grid dimensions </h4>
<h4> Boundary conditions </h4>
<h4> Data to be interpolated </h4>

<h4> Function prototypes: </h4>
<u>Single-precision real: </u><br>
<PRE>
UBspline_1d_s * create_UBspline_1d_s (Ugrid x_grid, BCtype_s xBC, float *data);
UBspline_2d_s * create_UBspline_2d_s (Ugrid x_grid, Ugrid y_grid,
                                      BCtype_s xBC, BCtype_s yBC, float *data);
UBspline_3d_s * create_UBspline_3d_s (Ugrid x_grid,   Ugrid y_grid, Ugrid z_grid,
                                      BCtype_s  xBC,  BCtype_s   yBC, BCtype_s   zBC, float *data);
</PRE>
<u>Single-precision complex: </u><br>
<PRE>
UBspline_1d_c * create_UBspline_1d_c (Ugrid x_grid, BCtype_c xBC, complex_float *data);
UBspline_2d_c * create_UBspline_2d_c (Ugrid x_grid, Ugrid y_grid,
                                      BCtype_c xBC, BCtype_c yBC, complex_float *data);
UBspline_3d_c * create_UBspline_3d_c (Ugrid x_grid,   Ugrid y_grid, Ugrid z_grid,
                                      BCtype_c  xBC,  BCtype_c   yBC, BCtype_c   zBC, 
                                      complex_float *data);
</PRE>
<u>Double-precision real: </u><br>
<PRE>
UBspline_1d_d * create_UBspline_1d_d (Ugrid x_grid, BCtype_d xBC, double *data);
UBspline_2d_d * create_UBspline_2d_d (Ugrid x_grid, Ugrid y_grid,
                                      BCtype_d xBC, BCtype_d yBC, double *data);
UBspline_3d_d * create_UBspline_3d_d (Ugrid x_grid,   Ugrid y_grid, Ugrid z_grid,
                                      BCtype_d  xBC,  BCtype_d   yBC, BCtype_d   zBC, double *data);
</PRE>
<u> Double-precision complex: </u><br>
<PRE>
UBspline_1d_z * create_UBspline_1d_z (Ugrid x_grid, BCtype_z xBC, complex_double *data);
UBspline_2d_z * create_UBspline_2d_z (Ugrid x_grid, Ugrid y_grid,
                                      BCtype_z xBC, BCtype_z yBC, complex_double *data);
UBspline_3d_z * create_UBspline_3d_z (Ugrid x_grid,   Ugrid y_grid, Ugrid z_grid,
                                      BCtype_z  xBC,  BCtype_z   yBC, BCtype_z   zBC, 
                                      complex_double *data);
</PRE>
<hr>
<h3> <font color="Blue"> Spline evaluation </font> </h3>
For each of the four datatypes, there are four evaluation routines, depending on
which quantities need to be computed:
<ul>
  <li> Value only
  <li> Value and gradient
  <li> Value, gradient, and Laplacian
  <li> Value, gradient, and Hessian (matrix of 2nd derivatives)
</ul>
For consistency, all results are returned through pointers passed to the evaluation
routines.  Currently, no bounds checking is done for the sake of speed.  The user is
responsible for ensuring that the points passed to the evaluation functions fall within
the grids specified at the time of spline creation.<br>

<h4> Function prototypes: </h4>

<table CELLPADDING=5 frame=border rules=all> 
  <tr>
    <td> <font color="Blue">Quick Jump Table</font>   </td>
    <td> 1D </td>
    <td> 2D </td>
    <td> 3D </td>
  </tr>
  <tr>
     <td> Single-precision real </td>
     <td> <a href="#1Ds"> 1ds </a>
     <td> <a href="#2Ds"> 2ds </a>
     <td> <a href="#3Ds"> 3ds </a>
  </tr>
  <tr>
     <td> Single-precision complex </td>
     <td> <a href="#1Dc"> 1dc </a>
     <td> <a href="#2Dc"> 2dc </a>
     <td> <a href="#3Dc"> 3dc </a>
  </tr>
  <tr>
     <td> Double-precision real </td>
     <td> <a href="#1Dd"> 1dd </a>
     <td> <a href="#2Dd"> 2dd </a>
     <td> <a href="#3Dd"> 3dd </a>
  </tr>
  <tr>
     <td> Double-precision complex </td>
     <td> <a href="#1Dz"> 1dz </a>
     <td> <a href="#2Dz"> 2dz </a>
     <td> <a href="#3Dz"> 3dz </a>
  </tr>
</table>
<br>
<h4> <font color="Blue"> Single-precision real: </font></h4>
<u> <a name="1Ds"> 1D </a></u>
<PRE>
inline void
eval_UBspline_1d_s     (UBspline_1d_s * restrict spline, 
		        double x, float* restrict val);

inline void
eval_UBspline_1d_s_vg  (UBspline_1d_s * restrict spline, double x, 
  		        float* restrict val, float* restrict grad);

inline void
eval_UBspline_1d_s_vgl (UBspline_1d_s * restrict spline, double x, 
			float* restrict val, float* restrict grad, float* restrict lapl);

inline void /* identical to above routine in 1D */
eval_UBspline_1d_s_vgh (UBspline_1d_s * restrict spline, double x, 
			float* restrict val, float* restrict grad, float* restrict hess);
</PRE>

<u> <a name="2Ds"> 2D </a> </u>
<PRE>
inline void
eval_UBspline_2d_s     (UBspline_2d_s * restrict spline, double x, double y, 
                        float* restrict val);

inline void
eval_UBspline_2d_s_vg  (UBspline_2d_s * restrict spline, double x, double y, 
  		        float* restrict val, float* restrict grad);

inline void
eval_UBspline_2d_s_vgl (UBspline_2d_s * restrict spline, double x, double y,
			float* restrict val, float* restrict grad, float* restrict lapl);

inline void 
eval_UBspline_2d_s_vgh (UBspline_2d_s * restrict spline, double x, double y,
			float* restrict val, float* restrict grad, float* restrict hess);
</PRE>
<u><a name="3Ds"> 3D </a></u>
<PRE>
inline void
eval_UBspline_3d_s     (UBspline_3d_s * restrict spline, double x, double y, double z,
                        float* restrict val);

inline void
eval_UBspline_3d_s_vg  (UBspline_3d_s * restrict spline, double x, double y, double z,
  		        float* restrict val, float* restrict grad);

inline void
eval_UBspline_3d_s_vgl (UBspline_3d_s * restrict spline, double x, double y, double z,
			float* restrict val, float* restrict grad, float* restrict lapl);

inline void 
eval_UBspline_3d_s_vgh (UBspline_3d_s * restrict spline, double x, double y,
			float* restrict val, float* restrict grad, float* restrict hess);
</PRE>

<h4><font color="Blue">Single-precision complex: </font></h4>
<u> <a name="1Dc"> 1D </a></u>
<PRE>
inline void
eval_UBspline_1d_c     (UBspline_1d_c * restrict spline, 
		        double x, complex_float* restrict val);

inline void
eval_UBspline_1d_c_vg  (UBspline_1d_c * restrict spline, double x, 
  		        complex_float* restrict val, complex_float* restrict grad);

inline void
eval_UBspline_1d_c_vgl (UBspline_1d_c * restrict spline, double x, 
			complex_float* restrict val, complex_float* restrict grad, complex_float* restrict lapl);

inline void /* identical to above routine in 1D */
eval_UBspline_1d_c_vgh (UBspline_1d_c * restrict spline, double x, 
			complex_float* restrict val, complex_float* restrict grad, complex_float* restrict hess);
</PRE>

<u> <a name="2Dc"> 2D </a> </u>
<PRE>
inline void
eval_UBspline_2d_c     (UBspline_2d_c * restrict spline, double x, double y, 
                        complex_float* restrict val);

inline void
eval_UBspline_2d_c_vg  (UBspline_2d_c * restrict spline, double x, double y, 
  		        complex_float* restrict val, complex_float* restrict grad);

inline void
eval_UBspline_2d_c_vgl (UBspline_2d_c * restrict spline, double x, double y,
			complex_float* restrict val, complex_float* restrict grad, complex_float* restrict lapl);

inline void 
eval_UBspline_2d_c_vgh (UBspline_2d_c * restrict spline, double x, double y,
			complex_float* restrict val, complex_float* restrict grad, complex_float* restrict hess);
</PRE>
<u> <a name="3Dc"> 3D </a> </u>
<PRE>
inline void
eval_UBspline_3d_c     (UBspline_3d_c * restrict spline, double x, double y, double z,
                        complex_float* restrict val);

inline void
eval_UBspline_3d_c_vg  (UBspline_3d_c * restrict spline, double x, double y, double z,
  		        complex_float* restrict val, complex_float* restrict grad);

inline void
eval_UBspline_3d_c_vgl (UBspline_3d_c * restrict spline, double x, double y, double z,
			complex_float* restrict val, complex_float* restrict grad, complex_float* restrict lapl);

inline void 
eval_UBspline_3d_c_vgh (UBspline_3d_c * restrict spline, double x, double y,
			complex_float* restrict val, complex_float* restrict grad, complex_float* restrict hess);
</PRE>

<h4> <font color="Blue">Double-precision real:</font></h4>
<u> <a name="1Dd"> 1D </a></u>
<PRE>
inline void
eval_UBspline_1d_d     (UBspline_1d_d * restrict spline, 
		        double x, double* restrict val);

inline void
eval_UBspline_1d_d_vg  (UBspline_1d_d * restrict spline, double x, 
  		        double* restrict val, double* restrict grad);

inline void
eval_UBspline_1d_d_vgl (UBspline_1d_d * restrict spline, double x, 
			double* restrict val, double* restrict grad, double* restrict lapl);

inline void /* identical to above routine in 1D */
eval_UBspline_1d_d_vgh (UBspline_1d_d * restrict spline, double x, 
			double* restrict val, double* restrict grad, double* restrict hess);
</PRE>

<u> <a name="2Dd"> 2D </a> </u>
<PRE>
inline void
eval_UBspline_2d_d     (UBspline_2d_d * restrict spline, double x, double y, 
                        double* restrict val);

inline void
eval_UBspline_2d_d_vg  (UBspline_2d_d * restrict spline, double x, double y, 
  		        double* restrict val, double* restrict grad);

inline void
eval_UBspline_2d_d_vgl (UBspline_2d_d * restrict spline, double x, double y,
			double* restrict val, double* restrict grad, double* restrict lapl);

inline void 
eval_UBspline_2d_d_vgh (UBspline_2d_d * restrict spline, double x, double y,
			double* restrict val, double* restrict grad, double* restrict hess);
</PRE>
<u> <a name="3Dd"> 3D </a></u>
<PRE>
inline void
eval_UBspline_3d_d     (UBspline_3d_d * restrict spline, double x, double y, double z,
                        double* restrict val);

inline void
eval_UBspline_3d_d_vg  (UBspline_3d_d * restrict spline, double x, double y, double z,
  		        double* restrict val, double* restrict grad);

inline void
eval_UBspline_3d_d_vgl (UBspline_3d_d * restrict spline, double x, double y, double z,
			double* restrict val, double* restrict grad, double* restrict lapl);

inline void 
eval_UBspline_3d_d_vgh (UBspline_3d_d * restrict spline, double x, double y,
			double* restrict val, double* restrict grad, double* restrict hess);
</PRE>

<h4> <font color="Blue">Double-precision complex: </font></h4>
<u> <a name="1Dz"> 1D </a></u>
<PRE>
inline void
eval_UBspline_1d_z     (UBspline_1d_z * restrict spline, 
		        double x, complex_double* restrict val);

inline void
eval_UBspline_1d_z_vg  (UBspline_1d_z * restrict spline, double x, 
  		        complex_double* restrict val, complex_double* restrict grad);

inline void
eval_UBspline_1d_z_vgl (UBspline_1d_z * restrict spline, double x, 
			complex_double* restrict val, complex_double* restrict grad, complex_double* restrict lapl);

inline void /* identical to above routine in 1D */
eval_UBspline_1d_z_vgh (UBspline_1d_z * restrict spline, double x, 
			complex_double* restrict val, complex_double* restrict grad, complex_double* restrict hess);
</PRE>

<u> <a name="2Dz"> 2D </a> </u>
<PRE>
inline void
eval_UBspline_2d_z     (UBspline_2d_z * restrict spline, double x, double y, 
                        complex_double* restrict val);

inline void
eval_UBspline_2d_z_vg  (UBspline_2d_z * restrict spline, double x, double y, 
  		        complex_double* restrict val, complex_double* restrict grad);

inline void
eval_UBspline_2d_z_vgl (UBspline_2d_z * restrict spline, double x, double y,
			complex_double* restrict val, complex_double* restrict grad, complex_double* restrict lapl);

inline void 
eval_UBspline_2d_z_vgh (UBspline_2d_z * restrict spline, double x, double y,
			complex_double* restrict val, complex_double* restrict grad, complex_double* restrict hess);
</PRE>
<u> <a name="3Dz"> 3D </a> </u>
<PRE>
inline void
eval_UBspline_3d_z     (UBspline_3d_z * restrict spline, double x, double y, double z,
                        complex_double* restrict val);

inline void
eval_UBspline_3d_z_vg  (UBspline_3d_z * restrict spline, double x, double y, double z,
  		        complex_double* restrict val, complex_double* restrict grad);

inline void
eval_UBspline_3d_z_vgl (UBspline_3d_z * restrict spline, double x, double y, double z,
			complex_double* restrict val, complex_double* restrict grad, complex_double* restrict lapl);

inline void 
eval_UBspline_3d_z_vgh (UBspline_3d_z * restrict spline, double x, double y,
			complex_double* restrict val, complex_double* restrict grad, complex_double* restrict hess);
</PRE>
<!--#include virtual="footer.shtml" -->
</body>
</html>
